import pygame
import random
pygame.init()
pygame.display.set_caption("Bootleg Space Invaders")
screen = pygame.display.set_mode((800, 800))
clock = pygame.time.Clock()
gameover = False
timer = 0;

#player vatiables
xpos = 400
ypos = 750
moveLeft = False
moveRight = False
shoot = False
#----------------------------------------------------------------------------------------------------------------------
class Dang:
    def __init__ (self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.numHits = 0

    def draw(self):
        #print("drawing Dang at", self.xpos, self.ypos)
        if self.numHits ==0:
            pygame.draw.rect(screen, (0, 0, 255), (self.xpos, self.ypos, 30, 30))
        if self.numHits ==1:
            pygame.draw.rect(screen, (0, 250, 10), (self.xpos, self.ypos, 30, 30))
        if self.numHits ==2:
            pygame.draw.rect(screen, (250, 50, 0), (self.xpos, self.ypos, 30, 30))
         
    def collide(self, BigBrrX, BigBrrY):
        if self.numHits < 3:
            if BigBrrX > self.xpos:
                if BigBrrX < self.xpos + 30:
                    if BigBrrY < self.ypos + 30:
                        if BigBrrY > self.ypos:
                            print("hit!")
                            self.numHits += 1
                            return False
        return True
#instantiate a bunch of Dangs    
Dangs = []
for k in range (4):
        for i in range (2):
            for j in range (3):
                Dangs.append(Dang(j*30+200*k+50, i*30+600))

#----------------------------------------------------------------------------------------------------------------------
class BigBrr:
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.isAlive = False

    def move(self, xpos, ypos):
        global shoot
        if self.isAlive == True: #only shoot live BigBrrs
            self.ypos-=5 #move up when shoot
        if self.ypos < 0: #check if you've hit the top of the screen
            self.isAlive = False #set to dead
            self.xpos = xpos #reset player position
            self.ypos = ypos

    def draw(self):
        pygame.draw.rect(screen, (0, 255 , 255), (self.xpos, self.ypos, 3, 20))

#instantiate BigBrr object
BigBrr = BigBrr(xpos+28, ypos) #create BigBrr object and pass player position
#----------------------------------------------------------------------------------------------------------------------
class DracoDraco:
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.isAlive = True
        self.direction = 1
    def draw(self):
        pygame.draw.rect(screen, (0,0,255), (self.xpos, self.ypos, 40, 40))
        if (self.isAlive == False):
            pygame.draw.rect(screen, (0,0,250), (self.xpos, self.ypos, 40, 40))
    
    def move(self, time):
        #reset what direction you are moving every 8 moves:
        if time % 800 == 0:
            self.ypos+=30 #moves down
            self.direction*=-1 #flip direction
            return 0 #resets timer to 0
   
        #mover every time the timer invreases by 100:
        if time%100==0:
            self.xpos+=50*self.direction #move right
   
        return time #doesn't reset if first if statement hasn't executed!
    
    def collide(self, BigBrrX, BigBrrY):
        if self.isAlive:
            if BigBrrX > self.xpos:
                if BigBrrX < self.xpos + 40:
                    if BigBrrY < self.ypos + 40:
                        if BigBrrY > self.ypos:
                            print("hit")
                            self.isAlive = False
                            return False
        return True

   

#instantiate a bunch of DracoDracos
sebastian = []
for i in range (4):
    for j in range (5):
        sebastian.append(DracoDraco(j*80+60, i*80+50))

#----------------------------------------------------------------------------------------------------------------------

class missle:
    def __init__(self, xpos, ypos):
        self.xpos = -10
        self.ypos = -10
        self.isAlive = False
    def move(self):
        if self.isAlive == True:
            self.ypos += 5
        if self.ypos > 800:
            self.isAlive = False
            self.xpos = -10
            self.ypos = -10
    def draw(self):
        if self.isAlive == True:
            pygame.draw.rect(screen, (0, 0, 250), (self.xpos, self.ypos, 3, 20))

NBAYoungBOY = []
for i in range(10):
    NBAYoungBOY.append(missle(i*80+75, 100))

       
#---------------------------------------------------------------------------------------------------------------------------

while not gameover: # start game loop#######################################################################################
    clock.tick(60)
    timer += 1
   
    #input section----------------------------------------------------------------------------
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            gameover = True #quit ggame if X is pressed in corner
           
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                moveLeft = True
            if event.key == pygame.K_RIGHT:
                moveRight = True
            if event.key == pygame.K_SPACE:
                shoot = True

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                    moveLeft = False
            if event.key == pygame.K_RIGHT:
                    moveRight = False
            if event.key == pygame.K_SPACE:
                    shoot = False
       
    #physics section--------------------------------------------------------------------------
   
   
   
    # PLAYER MOVEMENT: check variables from the intup section
    if moveLeft == True:
        vx = -3
    elif moveRight == True:
        vx = 3
    else:
        vx = 0
       
    # update player position
    xpos += vx
   
   
    #shoot player BigBrr--------------
    if shoot == True:
        BigBrr.isAlive = True

    if BigBrr.isAlive == True:
        BigBrr.move(xpos+28, ypos)
        if BigBrr.isAlive == True:
        #check for collision
            for i in range (len(sebastian)):
                BigBrr.isAlive = sebastian[i].collide(BigBrr.xpos, BigBrr.ypos)
                if BigBrr.isAlive == False:
                    break
           
        if BigBrr.isAlive == True:
        #check for collision between BigBrr and enemy
            for i in range (len(Dangs)):
                BigBrr.isAlive = Dangs[i].collide(BigBrr.xpos, BigBrr.ypos)
                if BigBrr.isAlive == False:
                    break
    else:
        BigBrr.xpos = xpos + 28
        BigBrr.ypos = ypos

   
    #Enemy shoot Missle----------------------------------------------------------------------

    #check for Dang/missle collison
    for i in range(len(Dangs)): #check each Dang box
        for j in range(len(NBAYoungBOY)): #against each missle
            if NBAYoungBOY[j].isAlive == True: # check if missle is true
                if Dangs[i].collide(NBAYoungBOY[j].xpos, NBAYoungBOY[j].ypos)== False: #call Dang collision for each combo
                    NBAYoungBOY[j].isAlive = False #kill missle
                    break #stop killing Dangs if you're dead


    for i in range(len(NBAYoungBOY)):
        NBAYoungBOY[i].move()

    chance = random.randrange(100)
    if chance < 2:

        pick = random.randrange(len(sebastian))
        if sebastian[pick].isAlive == True:
            for i in range(len(NBAYoungBOY)):
                if NBAYoungBOY[i].isAlive == False:
                    NBAYoungBOY[i].isAlive = True
                    NBAYoungBOY[i].xpos = sebastian[pick].xpos+5
                    NBAYoungBOY[i].ypos = sebastian[pick].ypos
                    break

               
    #check for player/missle collision
    for i in range (len(NBAYoungBOY)):
        if NBAYoungBOY[i].isAlive:
            if NBAYoungBOY[i].xpos > xpos:
                if NBAYoungBOY[i].xpos < xpos + 40:
                    if NBAYoungBOY[i].ypos < ypos + 40:
                        if NBAYoungBOY[i].ypos > ypos:
                            print("player hit!")
           

    #Render section---------------------------------------------------------------------------
   
    screen.fill((255,255,255))

    #move all the DracoDracos                
    for i in range (len(sebastian)):
        timer = sebastian[i].move(timer)

    pygame.draw.rect(screen, (0, 0, 255), (xpos, ypos, 60, 20))
   
    for i in range (len(sebastian)):
        sebastian[i].draw()

    for e in range (len(Dangs)):
        Dangs[e].draw()

    for e in range (len(NBAYoungBOY)):
        NBAYoungBOY[e].draw()
       
    BigBrr.draw()

    pygame.display.flip()
   
#end game loop-----------------------
   
pygame.quit()
